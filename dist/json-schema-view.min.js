/*!
 * json-schema-view
 * https://github.com/mohsen1/json-schema-view
 * Version: 0.4.3 - 2016-07-12T22:40:23.115Z
 * License: MIT
 */
"use strict";angular.module("mohsen1.json-schema-view",["RecursionHelper"]).directive("jsonSchemaView",["RecursionHelper",function(e){function s(e){function s(e){e&&(angular.isObject(e.items)?s(e.items):angular.isObject(e.properties)&&Object.keys(e.properties).forEach(function(a){e.properties[a].name=a,s(e.properties[a])}))}e.toggle=function(){e.isCollapsed=!e.isCollapsed},e.isRequired=function(s){var a=e.$parent.schema;return!!(a&&Array.isArray(a.required)&&s.name)&&a.required.indexOf(s.name)>-1},e.isPrimitiveCollapsible=function(){return e.schema.description||e.schema.title},e.convertXOf=function(e){return e.substring(0,3)+" of"},e.isCollapsed=e.open<0,e.refresh=function(){if(e.schema&&e.schema.$ref&&e.refObject){var a=e.schema.$ref.split("/");if("#"!==a[0])throw new Error("Only local $refs are supported");a.shift();var n=e.refObject;a.forEach(function(e){n=n[e]}),e.label=a[a.length-1],e.isCollapsed?e.schema.properties={}:e.schema=n}s(e.schema),e.isArray=e.schema&&"array"===e.schema.type,e.isPrimitive=e.schema&&!e.schema.properties&&!e.schema.items&&"array"!==e.schema.type&&"object"!==e.schema.type},e.$watch("isCollapsed",e.refresh),e.$watch("schema",e.refresh)}return{restrict:"E",templateUrl:"json-schema-view.html",replace:!0,scope:{schema:"=",open:"=",refObject:"="},compile:function(a){return e.compile(a,s)}}}]),angular.module("RecursionHelper",[]).factory("RecursionHelper",["$compile",function(e){return{compile:function(s,a){angular.isFunction(a)&&(a={post:a});var n,i=s.contents().remove();return{pre:a&&a.pre?a.pre:null,post:function(s,c){n||(n=e(i)),n(s,function(e){c.append(e)}),a&&a.post&&a.post.apply(null,arguments)}}}}}]),angular.module("mohsen1.json-schema-view").run(["$templateCache",function(e){e.put("enum.html",'<div class="inner enums" ng-if="!isCollapsed && schema.enum"><b>Enum:</b><json-formatter class="inner" json="schema.enum" open="open"></json-formatter></div>'),e.put("json-schema-view.html",'<div class="json-schema-view" ng-class="{collapsed: isCollapsed}"><b ng-show="label" ng-bind="label"></b><div class="primitive" ng-if="isPrimitive"><a class="title" ng-click="toggle()"><span class="toggle-handle" ng-if="isPrimitiveCollapsible()"></span>{{schema.title}}</a> <span class="type">{{schema.type}}</span> <span class="required" ng-if="isRequired(schema)">*</span> <span class="format" ng-if="!isCollapsed && schema.format">({{schema.format}})</span> <span class="range minimum" ng-if="!isCollapsed && schema.minimum">minimum:{{schema.minimum}}</span> <span class="range exclusiveMinimum" ng-if="!isCollapsed && schema.exclusiveMinimum">(ex)minimum:{{schema.exclusiveMinimum}}</span> <span class="range maximum" ng-if="!isCollapsed && schema.maximum">maximum:{{schema.maximum}}</span> <span class="range exclusiveMaximum" ng-if="!isCollapsed && schema.exclusiveMaximum">(ex)maximum:{{schema.exclusiveMaximum}}</span> <span class="range minLength" ng-if="!isCollapsed && schema.minLength">minLength:{{schema.minLength}}</span> <span class="range maxLength" ng-if="!isCollapsed && schema.maxLength">maxLength:{{schema.maxLength}}</span><div class="inner description">{{schema.description}}</div><div ng-include="\'enum.html\'" ng-if="!isCollapsed && schema.enum"></div><div ng-include="\'x_of.html\'" ng-if="schema.allOf" onload="type = \'allOf\'"></div><div ng-include="\'x_of.html\'" ng-if="schema.anyOf" onload="type = \'anyOf\'"></div><div ng-include="\'x_of.html\'" ng-if="schema.oneOf" onload="type = \'oneOf\'"></div></div><div ng-if="isArray" class="array"><a class="title" ng-click="toggle()"><span class="toggle-handle"></span>{{schema.title}} <span class="required" ng-if="isRequired(schema)">*</span> <span class="opening bracket">[</span><span class="closing bracket" ng-if="isCollapsed">]</span></a> <span ng-if="!isCollapsed && (schema.uniqueItems || schema.minItems || schema.maxItems)"><span title="items range">({{schema.minItems || 0}}..{{schema.maxItems || \'∞\'}})</span> <span title="unique" class="uniqueItems" ng-if="!isCollapsed && schema.uniqueItems">♦</span></span><div class="inner"><div class="description">{{schema.description}}</div><json-schema-view ng-if="!isCollapsed" schema="schema.items" open="open - 1" ref-object="refObject"></json-schema-view></div><div ng-include="\'enum.html\'" ng-if="!isCollapsed && schema.enum"></div><div ng-include="\'x_of.html\'" ng-if="schema.allOf" onload="type = \'allOf\'"></div><div ng-include="\'x_of.html\'" ng-if="schema.anyOf" onload="type = \'anyOf\'"></div><div ng-include="\'x_of.html\'" ng-if="schema.oneOf" onload="type = \'oneOf\'"></div><span class="closing bracket" ng-if="!isCollapsed">]</span></div><div ng-if="!isPrimitive && !isArray" class="object"><a class="title" ng-click="toggle()"><span class="toggle-handle"></span> {{schema.title}} <span class="required" ng-if="isRequired(schema)">*</span> <span class="opening brace">{</span> <span class="closing brace" ng-if="isCollapsed">}</span></a><div class="inner"><div class="description">{{schema.description}}</div><div class="property" ng-repeat="(propertyName, property) in schema.properties"><span class="name">{{propertyName}}:</span><json-schema-view schema="property" open="open - 1" ref-object="refObject"></json-schema-view></div></div><div ng-include="\'enum.html\'" ng-if="!isCollapsed && schema.enum"></div><div ng-include="\'x_of.html\'" ng-if="schema.allOf" onload="type = \'allOf\'"></div><div ng-include="\'x_of.html\'" ng-if="schema.anyOf" onload="type = \'anyOf\'"></div><div ng-include="\'x_of.html\'" ng-if="schema.oneOf" onload="type = \'oneOf\'"></div><span class="closeing brace" ng-if="!isCollapsed">}</span></div></div>'),e.put("x_of.html",'<div class="inner"><b>{{convertXOf(type)}}:</b><div class="inner" ng-repeat="schema in schema[type]"><json-schema-view schema="schema" ref-object="refObject" open="open - 1"></json-schema-view></div></div>')}]);